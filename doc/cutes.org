#+TITLE:cutes
#+MAN_CLASS_OPTIONS: :section-id 1 :company "Jolla Ltd." :date "Feb 11, 2013"
* NAME

  cutes allows to run JavaScript files from the command line as also
  QML files. cutes environment can be made available in QML context by
  importing Mer.Cutes QML plugin.

* SYNOPSIS

  *cutes* [-h] /script_file/ [script arguments]

* DESCRIPTION

  cutes is the Qt library JavaScript engine. cutes command provides the
  way to run JavaScript files as shell scripts or to load QML UI with
  cutes support.

* COMMAND LINE OPTIONS

  - *-h* :: show usage
  - *script_file* :: name of the javascript or qml file to be executed,
                     files with .qml extension will be considered as 
                     QML UI files, other - as JS files
  - *[script arguments]* :: arguments to be passed to javascript in
       the *cutes.module.args* variable

* ENVIRONMENT

  - *CUTES\_LIBRARY\_PATH* :: contains colon-separated list of paths
       to directories containing cutes extensions and JavaScript
       modules, available for importing. By default cutes is trying to
       add /usr/lib{,32,64}/cutes and /usr/share/cutes directories.

  - *CUTES_TRACE* :: number, if 0 or not defined - debug tracing in
                     cutes is disabled, otherwise debug tracing is
                     enabled. Also the number can be used by libraries
                     to enable tracing and change tracing level.

* JAVASCRIPT CONTEXT

  cutes provides several objects/functions, available in executed
  scripts. In qml context all variables are available only as members
  of the _cutes_ context variable. fprint is available only in pure js
  context. The ideal purpose of the context is to resemble environment
  used by popular js frameworks (like node.js or narwhal) to allow to
  reuse modules written for 'em and also to provide smooth transition
  for js developers using this frameworks.

- *print* :: prints whitespace separated arguments to stdout
- *fprint(fd, args...)* :: fprint(dst, ...) prints whitespace
     separated arguments to dst, where dst is QIODevice or 1 (stdout)
     or 2 (stderr)
- *cutes* :: cutes global variable storing execution context. Also
             available in qml context as a context variable
- *cutes.os* :: OS "name": can be any of ["linux", "macos",
                   "win32", "unknown"]
- *cutes.env* :: environment variables, read-only
- *cutes.setEnv(name, value)* :: set interpreter environment variable
     value
- *cutes.path* :: Application library paths
- *cutes.include(path, is_reload)* :: function to evaluate javascript
     file by file name as a module. File name can be absolute or
     relative to the directory where running script resides or to any
     directory in the library path. It also has bool parameter telling
     is module should be taken from cache if it is already loaded or
     it should be loaded anew (so, module data will not be shared with
     other modules run by current engine). module.exports (has also
     reference called exports) is returned as a result of execution.
- *cutes.require(path)* :: similar to cutes.include but does not have
     boolean 'is_reload' parameter, so module will always be taken
     from the cache
- *cutes.extend(path)* :: instructs engine to load cutes c++ extension
                    library
- *cutes.idle()* :: process events in cutes event loop, can be called
                    during long operations to improve
                    interactivity. This function can be unsafe
- *cutes.defer(fn)* :: defer execution of the *fn* until exit from
     current execution context or until cutes.idle() is called
- *cutes.module* :: current module/file context. It resembles
                    node.js/narwhal module object.It has the following
                    members
- *module.args* :: list of command line arguments
- *module.exports* :: see _exports_ below
- *module.cwd* :: current module working directory
- *module.loaded* :: is module already evaluated/loaded
- *module.filename* :: currently executed script file name
     (e.g. in *cutes.include* it will be included script path name)
- *module.id* :: synomym for the cutes.module.filename
- *module.cwd* :: current working directory or directory
     where currently executed/evaluated script is located
- *require* :: synonym for cutes.require, compatible with other
               module systems, returns symbols exported by module
- *exports* :: object to be used to hold exported symbols, it is just
               reference to the current module.exports

* AUTHOR
  Denis Zalevskiy <denis.zalevskiy@jollamobile.com>

* LICENSING
  cutes is distributed under terms and conditions of the LGPLv2.1+
  license.
