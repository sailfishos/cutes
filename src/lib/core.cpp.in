// @cpp_intro("core")
/**
 * @file core.cpp
 *
 * @author (C) 2013 Jolla Ltd. Denis Zalevskiy <denis.zalevskiy@jollamobile.com>
 * @copyright LGPLv2.1+ http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
 */

#include <QProcess>
#include <QFile>
#include <QDir>
#include <QFileInfo>
#include <QByteArray>
#include <QMetaType>
#include <QMutex>
#include <QDateTime>

#include <cutes/util.hpp>
#include <cor/util.hpp>

// @namespace("cutes::js")
namespace cutes { namespace js {

// @before_decl()

// @aclass("ByteArray", "QByteArray")
class ByteArray : public JsObject<ByteArray, QByteArray>
{
    // @header("ByteArray", "QByteArray", ["copy_ctor()"])

    // @get_cutes_obj("ByteArray", "mid", ["int", {"sig": "int", "default": -1}])
    // @get_cutes_obj("ByteArray", "left", ["int"])
    // @get_cutes_obj("ByteArray", "right", ["int"])
    // @proxy("void", "append", ["QString const&"])
    // @proxy("int", "indexOf", ["QString const&", {"sig" : "int", "default": 0}], is_const = True)
    // @proxy("int", "length", is_const = True)

    // @custom_fn("asString", js = {"rename" : "toString"})
    Q_INVOKABLE QString asString() const
    {
        QString res(*impl_);
        return res;
    }

    // @custom_fn("split", js = {"convert" : "convert_array('ByteArray', 'split')"})
    Q_INVOKABLE QJSValue split(char sep) const
    {
        return convert<QJSValue>(impl_->split(sep));
    }

    static ctors_type ctors_;
};

ByteArray::base_type::ctors_type ByteArray::ctors_ = {{
        [](QJSEngine &, QVariantList const &) {
            return std::make_shared<QByteArray>();
        },
        [](QJSEngine &, QVariantList const &values) {
            auto v = values[0];
            if (hasType(v, QMetaType::QString)) {
                auto res =  std::make_shared<QByteArray>();
                res->append(v.toString());
                return res;
            }
            return std::make_shared<QByteArray>();
        }
    }};

// @aclass("Process", "QProcess")
class Process : public JsObject<Process, QProcess>
{
    // @header("Process", "QProcess")
    // @enum("ExitStatus", "QProcess", "NormalExit CrashExit")
    // @enum("ProcessState", "QProcess", "NotRunning Starting Running")
    // @enum("ProcessError", "QProcess", "FailedToStart Crashed Timedout WriteError ReadError UnknownError")

    // @proxy("void", "start", ["QString const &", "QStringList const &"])
    // @proxy("bool", "waitForFinished", ["int"])
    // @proxy("bool", "waitForStarted", ["int"])
    // @proxy("void", "setWorkingDirectory", ["QString const&"])
    // @proxy("int", "exitCode", is_const = True)
    // @proxy("int", "exitStatus", is_const = True)
    // @proxy("int", "error", is_const = True)
    // @proxy("int", "state", is_const = True)
    // @proxy("qint64", "pid", is_const = True)

    // @get_cutes_obj("ByteArray", "readAllStandardOutput")
    // @get_cutes_obj("ByteArray", "readAllStandardError")

    // @proxy("qint64", "write", ["QByteArray const&"])
    // @proxy("void", "closeWriteChannel")

    static ctors_type ctors_;
};

Process::base_type::ctors_type Process::ctors_;

// @aclass("File", "QFile")
class File : public JsObject<File, QFile>
{
    // @header("File", "QFile")
    // @enum("OpenMode", "QIODevice", "NotOpen ReadOnly WriteOnly ReadWrite Append Truncate Text Unbuffered")

    // @enum("Permission", "QFileDevice", "ReadOwner WriteOwner ExeOwner ReadUser WriteUser ExeUser ReadGroup WriteGroup ExeGroup ReadOther WriteOther ExeOther")

    // @proxy("void", "close")
    // @proxy("bool", "isOpen", is_const = True)
    // @proxy("int", "permissions")
    // @proxy("bool", "open", [{"sig" : "int", "convert" : "(QIODevice::OpenModeFlag){}"}])
    // @get_cutes_obj("ByteArray", "readAll")
    // @proxy_obj_p0("qint64", "write", "ByteArray", 0)

    static ctors_type ctors_;
};

File::base_type::ctors_type File::ctors_ = {{
        [](QJSEngine &, QVariantList const &) {
            return std::make_shared<QFile>();
        },
        [](QJSEngine &, QVariantList const &values) {
            auto v = values[0];
            if (hasType(v, QMetaType::QString)) {
                return std::make_shared<QFile>(v.toString());
            }
            return std::make_shared<QFile>();
        }
    }};

// @aclass("FileInfo", "QFileInfo")
class FileInfo : public JsObject<FileInfo, QFileInfo>
{
    // @header("FileInfo", "QFileInfo", ["copy_ctor()"])
    // @proxy("bool", "exists", is_const = True)
    // @proxy("bool", "isFile", is_const = True)
    // @proxy("bool", "caching", is_const = True)
    // @proxy("bool", "isSymLink", is_const = True)
    // @proxy("bool", "isDir", is_const = True)
    // @proxy("bool", "isExecutable", is_const = True)
    // @proxy("bool", "isWritable", is_const = True)
    // @proxy("bool", "isReadable", is_const = True)
    // @proxy("bool", "isAbsolute", is_const = True)
    // @proxy("bool", "isRelative", is_const = True)
    // @proxy("bool", "isRoot", is_const = True)
    // @proxy("bool", "isHidden", is_const = True)

    // @proxy("QDateTime", "lastModified", is_const = True)

    // @proxy("QString", "absoluteFilePath", is_const = True)
    // @proxy("QString", "absolutePath", is_const = True)
    // @proxy("QString", "baseName", is_const = True)
    // @proxy("QString", "canonicalFilePath", is_const = True)
    // @proxy("QString", "canonicalPath", is_const = True)
    // @proxy("QString", "completeBaseName", is_const = True)
    // @proxy("QString", "completeSuffix", is_const = True)
    // @proxy("QString", "fileName", is_const = True)
    // @proxy("QString", "filePath", is_const = True)
    // @proxy("QString", "group", is_const = True)
    // @proxy("QString", "owner", is_const = True)
    // @proxy("QString", "path", is_const = True)
    // @proxy("QString", "symLinkTarget", is_const = True)
    // @proxy("QString", "suffix", is_const = True)

    // @proxy("int", "permissions", is_const = True)
    // @proxy("unsigned", "groupId", is_const = True)
    // @proxy("int", "ownerId", is_const = True)

    // @get_cutes_obj("Dir", "dir", is_const = True)
    // @proxy("qint64", "size", is_const = True)

    static ctors_type ctors_;
};

FileInfo::base_type::ctors_type FileInfo::ctors_ = {{
        [](QJSEngine &, QVariantList const &) {
            return std::make_shared<QFileInfo>();
        },
        [](QJSEngine &, QVariantList const &values) {
            auto v = values[0];
            if (hasType(v, QMetaType::QString)) {
                return std::make_shared<QFileInfo>(v.toString());
            }
            return std::make_shared<QFileInfo>();
        }
    }};

// @aclass("Dir", "QDir")
class Dir : public JsObject<Dir, QDir>
{
    // @header("Dir", "QDir", ["copy_ctor()"])
    // @enum("Filter", "QDir", "Dirs AllDirs Files Drives NoSymLinks NoDotAndDotDot NoDot NoDotDot AllEntries Readable Writable Executable Modified Hidden System CaseSensitive NoFilter")
    // @enum("SortFlag", "QDir", "Name Time Size Unsorted SortByMask DirsFirst Reversed IgnoreCase DirsLast LocaleAware Type NoSort")

    // @proxy("QString", "homePath")
    // @proxy("QString", "rootPath")

    // @proxy("bool", "mkdir", ["QString const&"])
    // @proxy("QString", "relativeFilePath", ["QString const&"])
    // @proxy("QString", "filePath", ["QString const&"])
    // @proxy("bool", "rename", ["QString const&", "QString const&"])
    // @proxy("bool", "exists", is_const = True)
    // @proxy("bool", "isRoot", is_const = True)
    // @proxy("QString", "dirName", is_const = True)
    // @proxy("QString", "path", is_const = True)
    // @proxy("bool", "cdUp")
    // @proxy("void", "refresh")
    // @proxy("QStringList", "entryList", ["QStringList const&", {"sig" : "int", "default" : "NoFilter", "convert" : "(QDir::Filter){}"}, {"sig" : "int", "default" : "NoSort", "convert" : "(QDir::SortFlag){}"}])

    // @custom_fn("entryInfoList", js = {"convert" : "convert_array('FileInfo', 'entryInfoList')"})
    Q_INVOKABLE QJSValue entryInfoList
    (const QStringList & nameFilters, int filters, int sort) const
    {
        return convert<QJSValue>
            (impl_->entryInfoList
             (nameFilters, (QDir::Filter)filters, (QDir::SortFlag)sort));
    }

    static ctors_type ctors_;
};

Dir::base_type::ctors_type Dir::ctors_ = {{
        [](QJSEngine &, QVariantList const &) {
            return std::make_shared<QDir>();
        },
        [](QJSEngine &, QVariantList const &values) {
            auto v = values[0];
            if (hasType(v, QMetaType::QString)) {
                return std::make_shared<QDir>(v.toString());
            }
            return std::make_shared<QDir>();
        }
    }};

// @aclass("Mutex", "QMutex")
class Mutex : public JsObject<Mutex, QMutex>
{
    // @header("Mutex", "QMutex")
    // @proxy("void", "tryLock", [{"sig" : "int", "default" : 0}])
    // @proxy("void", "lock")
    // @proxy("void", "unlock")

    static ctors_type ctors_;
};

Mutex::base_type::ctors_type Mutex::ctors_;

}}

// @before_def_out_namespace()

namespace cutes { namespace js {
// @cpp_impl()

void ObjectFactory::init()
{
    // @register_classes()
}

}}


extern "C" QJSValue cutesRegister(QJSEngine *engine)
{
    using cutes::js::ObjectFactory;
    auto p = cor::make_unique<ObjectFactory>(engine);
    return engine->newQObject(p.release());
}

#include "core.moc"
